#include "openglwidget.h"
#include <qgl.h>

GLint WindW = 800;
GLint WindH = 600;
GLfloat oldx, oldy;
GLfloat scale = 1.0;
GLfloat xangle = 15.0f;
GLfloat yangle = -15.0f;
GLfloat Pi = 3.14159;

Grapes grape;
LSystem lsrule(grape);


OpenGLWidget::OpenGLWidget(QWidget *parent) : QOpenGLWidget(parent)
{

}

void OpenGLWidget::initializeGL()
{
    //inintial OpenGL
    initializeOpenGLFunctions();
    glClearColor(1.0, 1.0, 1.0, 0.0);
    glClearDepth(1.0);
    glEnable(GL_DEPTH_TEST);
    glDepthFunc(GL_LEQUAL);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-25.0, 25.0, -25.0, 25.0, -25.0, 25.0);
    glMatrixMode(GL_MODELVIEW);
    //loadGLTextures();
    glEnable(GL_TEXTURE_2D);

    lsrule.initGrammar();//insert all unit layers
    lsrule.generateFractal();//generate vertexs
    lsrule.collision_detection();//detect collision

}

void OpenGLWidget::resizeGL(int w, int h)
{
        //change perspective
        glViewport(0, 0, (GLsizei)w, (GLsizei)h);
        GLfloat f = 25.0f;
        glMatrixMode(GL_PROJECTION);
        glLoadIdentity();
        if (w <= h)
            glOrtho(-f, f, -f * (GLfloat)h / (GLfloat)w,
                f*(GLfloat)h / (GLfloat)w, -f, f);
        else
            glOrtho(-f * (GLfloat)w / (GLfloat)h,
                f*(GLfloat)w / (GLfloat)h, -f, f, -f, f);
        glMatrixMode(GL_MODELVIEW);
        glLoadIdentity();
}

void OpenGLWidget::paintGL()
{
        QTime timeCounter;
        timeCounter.start();
        glClearColor(1.0, 1.0, 1.0, 0.0);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
        glLoadIdentity();
        glColor4f(1.0, 1.0, 1.0, 1.0);
        glRotatef(xangle, 1.0, 0.0, 0.0);
        glRotatef(yangle, 0.0, 1.0, 0.0);
        glScalef(scale, scale, scale);
        glTranslatef(0, -20, 0);
        //render stems
        for (unsigned int i = 0; i < lsrule.trunks.size(); i++) {
            DrawChannel(lsrule.trunks[i].pos1, lsrule.trunks[i].pos2, lsrule.trunks[i].radius);
        }
        //render grapes
        for (int i = 0; i < lsrule.berries.size(); i++) { //
            DrawBerry(lsrule.berries[i].pos1, lsrule.berries[i].pos2, lsrule.berries[i].radius);
        }
        glFlush();
        timeCounter.elapsed();
}


void OpenGLWidget::mousePressEvent(QMouseEvent *event)
 {
     lastPos = event->pos();
 }

void OpenGLWidget::mouseMoveEvent(QMouseEvent *event)
 {
    //mouse actions
     int deltax = event->x() - lastPos.x();
     int deltay = event->y() - lastPos.y();
     yangle += 360 * (GLfloat)deltax / (GLfloat)WindW;//根据屏幕上鼠标滑动的距离来设置旋转的角度
     xangle += 360 * (GLfloat)deltay / (GLfloat)WindH;
     lastPos = event->pos();
     update();
}




//void OpenGLWidget::loadGLTextures()
//{
//        QImage tex1, buf1;
//        QImage tex2, buf2;
//         if  (!buf1.load( "C:/Code/Opengl/berry.JPG" ))
//        {
//            qWarning( "Could not read image file!" );
//            QImage dummy( 128 ,  128 , QImage::Format_RGB32);
//            dummy.fill(Qt::green);
//            buf1 = dummy;
//        }

//         if  (!buf2.load( "C:/Code/Opengl/stem.JPG" ))
//        {
//            qWarning( "Could not read image file!" );
//            QImage dummy( 128 ,  128 , QImage::Format_RGB32);
//            dummy.fill(Qt::green);
//            buf2 = dummy;
//        }


//        tex1 = QGLWidget::convertToGLFormat(buf1);
//         // create texture
//        glGenTextures( 1 , &texture[ 0 ]);
//         // bind texture to texture[0];
//        glBindTexture(GL_TEXTURE_2D, texture[ 0 ]);

//        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP);
//        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP);

//        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
//        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

//        glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_REPLACE);

//        glTexImage2D(GL_TEXTURE_2D,  0 ,  3 , tex1.width(), tex1.height(),  0 ,
//                     GL_RGBA, GL_UNSIGNED_BYTE, tex1.bits());


//        tex2 = QGLWidget::convertToGLFormat(buf2);
//        glGenTextures( 1 , &texture[ 1 ]);
//        glBindTexture(GL_TEXTURE_2D, texture[ 1 ]);
//        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
//        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
//        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
//        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
//        glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);
//        glTexImage2D(GL_TEXTURE_2D,  0 ,  3 , tex2.width(), tex2.height(),  0 ,
//                     GL_RGBA, GL_UNSIGNED_BYTE, tex2.bits());

//}





void OpenGLWidget::drawcone(double r, double h)
{
    //draw a cylinder
    for (int i = 0; i <360; i += 50) {
            //draw a sector
            float temp = i * Pi / 180;
            float temp1 = (i + 50)*Pi / 180;

            //glBindTexture(GL_TEXTURE_2D, texture[1]);
            glBegin(GL_QUADS);
            glColor3ub(107, 142, 35);
            //glTexCoord2f(0.0 , 0.0);
            glVertex3f(r*cos(temp)*grape.trunk.radius_shrink, 0, r*sin(temp)*grape.trunk.radius_shrink);
            glColor3ub(107, 142, 35);
            //glTexCoord2f(1.0 , 0.0);
            glVertex3f(r*cos(temp), h, r*sin(temp));
            glColor3ub(100, 150, 35);
            //glTexCoord2f(1.0 , 1.0);
            glVertex3f(r*cos(temp1), h, r*sin(temp1));
            glColor3ub(107, 142, 35);
            //glTexCoord2f(0.0 , 1.0);
            glVertex3f(r*cos(temp1)*grape.trunk.radius_shrink, 0.0f, r*sin(temp1)*grape.trunk.radius_shrink);
            glEnd();
        }

}

void OpenGLWidget::DrawChannel(Node A, Node B, double r)
{
    GLfloat   dx = B.x - A.x;
        GLfloat   dy = B.y - A.y;
        GLfloat   dz = B.z - A.z;
        // calculate AB distance
        GLfloat   distance = sqrt(dx*dx + dy * dy + dz * dz);
        // calculate translation
        GLfloat  px = A.x;
        GLfloat  py = A.y - 1;
        GLfloat  pz = A.z;

        GLfloat  bx = px;
        GLfloat  by = (1 - distance) + py;
        GLfloat  bz = pz;
        // start vector
        GLfloat  sx = bx - A.x;
        GLfloat  sy = by - A.y;
        GLfloat  sz = bz - A.z;
        // normal vector
        GLfloat fx = sy * dz - dy * sz;
        GLfloat fy = sz * dx - sx * dz;
        GLfloat fz = sx * dy - dx * sy;


        GLfloat ax = fabs(B.x - bx);
        GLfloat ay = fabs(B.y - by);
        GLfloat az = fabs(B.z - bz);
        GLfloat length = sqrt(ax*ax + ay * ay + az * az);
        // calculate angle
        GLfloat angle = acos((distance*distance * 2 - length * length) / (2 * distance*distance))*180.0f / 3.14159;

        glPushMatrix();

        // translate to (0,-1,0)，rotate around normal vector，translate to starting point
        glTranslatef(A.x, A.y, A.z);
        glRotatef(angle, fx, fy, fz);
        glTranslatef(0, -distance, 0);
        drawcone(r, distance);
        glPopMatrix();

}

//a sphere is divided into sectors and stacks
void OpenGLWidget::drawSphere(double r, int lats, int longs) {
    int i, j;
    for(i = 0; i <= lats; i++) {
        //Draw a stack
        double lat0 = M_PI * (-0.5 + (double) (i - 1) / lats);
        double z0  = sin(lat0);
        double zr0 =  cos(lat0);

        double lat1 = M_PI * (-0.5 + (double) i / lats);
        double z1 = sin(lat1);
        double zr1 = cos(lat1);

        //glBindTexture(GL_TEXTURE_2D, texture[0]);
        glBegin(GL_QUAD_STRIP);
        for(j = 0; j <= longs; j++) {
            //Draw a sector
            double lng = 2 * M_PI * (double) (j - 1) / longs;
            double x = cos(lng);
            double y = sin(lng);

            glColor3ub(138, 43, 226);
            //glTexCoord2f(0.0f, 0.0f);
            glNormal3f(x * zr0, y * zr0, z0);
            glVertex3f(r * x * zr0, r * y * zr0, r * z0);
            glColor3ub(138, 43, 226);
            //glTexCoord2f(1.0f, 1.0f);
            glNormal3f(x * zr1, y * zr1, z1);
            glVertex3f(r * x * zr1, r * y * zr1, r * z1);
        }
        glEnd();
    }
}



void OpenGLWidget::DrawBerry(Node A, Node B, double r) {

    //same as DrawChannel

    GLfloat   dx = B.x - A.x;
    GLfloat   dy = B.y - A.y;
    GLfloat   dz = B.z - A.z;

    GLfloat   distance = sqrt(dx*dx + dy * dy + dz * dz);

    GLfloat  px = A.x;
    GLfloat  py = A.y - 1;
    GLfloat  pz = A.z;

    GLfloat  bx = px;
    GLfloat  by = (1 - distance) + py;
    GLfloat  bz = pz;

    GLfloat  sx = bx - A.x;
    GLfloat  sy = by - A.y;
    GLfloat  sz = bz - A.z;

    GLfloat fx = sy * dz - dy * sz;
    GLfloat fy = sz * dx - sx * dz;
    GLfloat fz = sx * dy - dx * sy;

    GLfloat ax = fabs(B.x - bx);
    GLfloat ay = fabs(B.y - by);
    GLfloat az = fabs(B.z - bz);
    GLfloat length = sqrt(ax*ax + ay * ay + az * az);

    GLfloat angle = acos((distance*distance * 2 - length * length) / (2 * distance*distance))*180.0f / 3.14159;
    glPushMatrix();

    glTranslatef(A.x, A.y, A.z);
    glRotatef(angle, fx, fy, fz);
    glTranslatef(0, -r, 0);
    glShadeModel(GL_SMOOTH);
    drawSphere(r,10,10);
    //Sphere(0,0,0,0);
    glPopMatrix();
}

